
ESC 2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002398  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002600  08002600  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002600  08002600  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002600  08002600  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000054  0800265c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800265c  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000052fc  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fd7  00000000  00000000  000253c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  000263a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000503  00000000  00000000  00026a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ad6  00000000  00000000  00026f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000053a6  00000000  00000000  0003fa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000930b6  00000000  00000000  00044def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020cc  00000000  00000000  000d7ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d9f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000054 	.word	0x20000054
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002560 	.word	0x08002560

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000058 	.word	0x20000058
 800021c:	08002560 	.word	0x08002560

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <__NVIC_SetPriorityGrouping+0x44>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002dc:	4013      	ands	r3, r2
 80002de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002f2:	4a04      	ldr	r2, [pc, #16]	; (8000304 <__NVIC_SetPriorityGrouping+0x44>)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	60d3      	str	r3, [r2, #12]
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000318:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800031c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	431a      	orrs	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	2a00      	cmp	r2, #0
 8000336:	d002      	beq.n	800033e <LL_ADC_SetGainCompensation+0x36>
 8000338:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800033c:	e000      	b.n	8000340 <LL_ADC_SetGainCompensation+0x38>
 800033e:	2200      	movs	r2, #0
 8000340:	431a      	orrs	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	611a      	str	r2, [r3, #16]
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000352:	b480      	push	{r7}
 8000354:	b087      	sub	sp, #28
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3330      	adds	r3, #48	; 0x30
 8000362:	461a      	mov	r2, r3
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	0a1b      	lsrs	r3, r3, #8
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	f003 030c 	and.w	r3, r3, #12
 800036e:	4413      	add	r3, r2
 8000370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f003 031f 	and.w	r3, r3, #31
 800037c:	211f      	movs	r1, #31
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	401a      	ands	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	0e9b      	lsrs	r3, r3, #26
 800038a:	f003 011f 	and.w	r1, r3, #31
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	f003 031f 	and.w	r3, r3, #31
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	431a      	orrs	r2, r3
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800039e:	bf00      	nop
 80003a0:	371c      	adds	r7, #28
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b087      	sub	sp, #28
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	60f8      	str	r0, [r7, #12]
 80003b2:	60b9      	str	r1, [r7, #8]
 80003b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	3314      	adds	r3, #20
 80003ba:	461a      	mov	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	0e5b      	lsrs	r3, r3, #25
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	4413      	add	r3, r2
 80003c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	0d1b      	lsrs	r3, r3, #20
 80003d2:	f003 031f 	and.w	r3, r3, #31
 80003d6:	2107      	movs	r1, #7
 80003d8:	fa01 f303 	lsl.w	r3, r1, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	401a      	ands	r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	0d1b      	lsrs	r3, r3, #20
 80003e4:	f003 031f 	and.w	r3, r3, #31
 80003e8:	6879      	ldr	r1, [r7, #4]
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	431a      	orrs	r2, r3
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80003f4:	bf00      	nop
 80003f6:	371c      	adds	r7, #28
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d10a      	bne.n	800042a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000420:	431a      	orrs	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000428:	e00a      	b.n	8000440 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000436:	43db      	mvns	r3, r3
 8000438:	401a      	ands	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	407f0000 	.word	0x407f0000

08000450 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	691b      	ldr	r3, [r3, #16]
 800045e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000462:	f023 0303 	bic.w	r3, r3, #3
 8000466:	683a      	ldr	r2, [r7, #0]
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	611a      	str	r2, [r3, #16]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800048a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	6093      	str	r3, [r2, #8]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80004ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <LL_RCC_HSI_Enable+0x1c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <LL_RCC_HSI_Enable+0x1c>)
 80004d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_RCC_HSI_IsReady+0x24>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004f8:	d101      	bne.n	80004fe <LL_RCC_HSI_IsReady+0x16>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <LL_RCC_HSI_IsReady+0x18>
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	061b      	lsls	r3, r3, #24
 8000524:	4904      	ldr	r1, [pc, #16]	; (8000538 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000526:	4313      	orrs	r3, r2
 8000528:	604b      	str	r3, [r1, #4]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_RCC_SetSysClkSource+0x24>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f023 0203 	bic.w	r2, r3, #3
 800054c:	4904      	ldr	r1, [pc, #16]	; (8000560 <LL_RCC_SetSysClkSource+0x24>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4313      	orrs	r3, r2
 8000552:	608b      	str	r3, [r1, #8]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_RCC_GetSysClkSource+0x18>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	f003 030c 	and.w	r3, r3, #12
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	608b      	str	r3, [r1, #8]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005b8:	4904      	ldr	r1, [pc, #16]	; (80005cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	608b      	str	r3, [r1, #8]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000

080005d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005e0:	4904      	ldr	r1, [pc, #16]	; (80005f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	608b      	str	r3, [r1, #8]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <LL_RCC_SetUSARTClockSource+0x30>)
 8000602:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	0c1b      	lsrs	r3, r3, #16
 800060a:	43db      	mvns	r3, r3
 800060c:	401a      	ands	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4905      	ldr	r1, [pc, #20]	; (8000628 <LL_RCC_SetUSARTClockSource+0x30>)
 8000614:	4313      	orrs	r3, r2
 8000616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <LL_RCC_SetADCClockSource+0x44>)
 8000636:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	0c1b      	lsrs	r3, r3, #16
 800063e:	f003 031f 	and.w	r3, r3, #31
 8000642:	2103      	movs	r1, #3
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	401a      	ands	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	b2d9      	uxtb	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f003 031f 	and.w	r3, r3, #31
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <LL_RCC_SetADCClockSource+0x44>)
 800065e:	4313      	orrs	r3, r2
 8000660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <LL_RCC_PLL_Enable+0x1c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <LL_RCC_PLL_Enable+0x1c>)
 800067e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <LL_RCC_PLL_IsReady+0x24>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80006a4:	d101      	bne.n	80006aa <LL_RCC_PLL_IsReady+0x16>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <LL_RCC_PLL_IsReady+0x18>
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006cc:	68da      	ldr	r2, [r3, #12]
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006d0:	4013      	ands	r3, r2
 80006d2:	68f9      	ldr	r1, [r7, #12]
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4311      	orrs	r1, r2
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	0212      	lsls	r2, r2, #8
 80006dc:	4311      	orrs	r1, r2
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	4904      	ldr	r1, [pc, #16]	; (80006f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006e4:	4313      	orrs	r3, r2
 80006e6:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000
 80006f8:	f9ff800c 	.word	0xf9ff800c

080006fc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4013      	ands	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000

0800074c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000756:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000758:	4907      	ldr	r1, [pc, #28]	; (8000778 <LL_APB1_GRP1_EnableClock+0x2c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000762:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000

0800077c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000786:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000792:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4013      	ands	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000

080007ac <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <LL_FLASH_SetLatency+0x24>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f023 020f 	bic.w	r2, r3, #15
 80007bc:	4904      	ldr	r1, [pc, #16]	; (80007d0 <LL_FLASH_SetLatency+0x24>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	600b      	str	r3, [r1, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40022000 	.word	0x40022000

080007d4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LL_FLASH_GetLatency+0x18>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 030f 	and.w	r3, r3, #15
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40022000 	.word	0x40022000

080007f0 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <LL_PWR_EnableRange1BoostMode+0x20>)
 80007f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <LL_PWR_EnableRange1BoostMode+0x20>)
 80007fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000800:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40007000 	.word	0x40007000

08000814 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f043 0201 	orr.w	r2, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	601a      	str	r2, [r3, #0]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3308      	adds	r3, #8
 8000862:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	e853 3f00 	ldrex	r3, [r3]
 800086a:	60bb      	str	r3, [r7, #8]
   return(result);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	075b      	lsls	r3, r3, #29
 8000876:	4313      	orrs	r3, r2
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3308      	adds	r3, #8
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	61ba      	str	r2, [r7, #24]
 8000882:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	e841 2300 	strex	r3, r2, [r1]
 800088c:	613b      	str	r3, [r7, #16]
   return(result);
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1e4      	bne.n	800085e <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b089      	sub	sp, #36	; 0x24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3308      	adds	r3, #8
 80008b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	e853 3f00 	ldrex	r3, [r3]
 80008b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	065b      	lsls	r3, r3, #25
 80008c4:	4313      	orrs	r3, r2
 80008c6:	61fb      	str	r3, [r7, #28]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3308      	adds	r3, #8
 80008cc:	69fa      	ldr	r2, [r7, #28]
 80008ce:	61ba      	str	r2, [r7, #24]
 80008d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80008d2:	6979      	ldr	r1, [r7, #20]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	e841 2300 	strex	r3, r2, [r1]
 80008da:	613b      	str	r3, [r7, #16]
   return(result);
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1e4      	bne.n	80008ac <LL_USART_SetRXFIFOThreshold+0xa>
}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	3724      	adds	r7, #36	; 0x24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	609a      	str	r2, [r3, #8]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092c:	2b80      	cmp	r3, #128	; 0x80
 800092e:	d101      	bne.n	8000934 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000956:	d101      	bne.n	800095c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000958:	2301      	movs	r3, #1
 800095a:	e000      	b.n	800095e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800097e:	d101      	bne.n	8000984 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f7ff fed2 	bl	800077c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009dc:	f7ff feb6 	bl	800074c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff fc6d 	bl	80002c0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 f837 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ea:	f000 f9c3 	bl	8000d74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ee:	f000 f943 	bl	8000c78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009f2:	f000 f885 	bl	8000b00 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	char msg[40] = {0};
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2224      	movs	r2, #36	; 0x24
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f928 	bl	8001c58 <memset>
	snprintf(msg, 40, "%d, %d\r\n", 100, 200);
 8000a08:	1d38      	adds	r0, r7, #4
 8000a0a:	23c8      	movs	r3, #200	; 0xc8
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <main+0x84>)
 8000a12:	2128      	movs	r1, #40	; 0x28
 8000a14:	f001 f8ec 	bl	8001bf0 <sniprintf>
	for (int i = 0; i < 40; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a1c:	e011      	b.n	8000a42 <main+0x76>
		LL_USART_TransmitData8(USART2, msg[i]);
 8000a1e:	1d3a      	adds	r2, r7, #4
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	480a      	ldr	r0, [pc, #40]	; (8000a54 <main+0x88>)
 8000a2a:	f7ff ffb2 	bl	8000992 <LL_USART_TransmitData8>
		while (!LL_USART_IsActiveFlag_TXE_TXFNF(USART2)) {
 8000a2e:	bf00      	nop
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <main+0x88>)
 8000a32:	f7ff ff73 	bl	800091c <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0f9      	beq.n	8000a30 <main+0x64>
	for (int i = 0; i < 40; i++) {
 8000a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3e:	3301      	adds	r3, #1
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	2b27      	cmp	r3, #39	; 0x27
 8000a46:	ddea      	ble.n	8000a1e <main+0x52>
			// wait
		}
	}
	LL_mDelay(100);
 8000a48:	2064      	movs	r0, #100	; 0x64
 8000a4a:	f001 f899 	bl	8001b80 <LL_mDelay>
  {
 8000a4e:	e7d2      	b.n	80009f6 <main+0x2a>
 8000a50:	08002578 	.word	0x08002578
 8000a54:	40004400 	.word	0x40004400

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000a5e:	2004      	movs	r0, #4
 8000a60:	f7ff fea4 	bl	80007ac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8000a64:	bf00      	nop
 8000a66:	f7ff feb5 	bl	80007d4 <LL_FLASH_GetLatency>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d1fa      	bne.n	8000a66 <SystemClock_Config+0xe>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 8000a70:	f7ff febe 	bl	80007f0 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 8000a74:	f7ff fd28 	bl	80004c8 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a78:	bf00      	nop
 8000a7a:	f7ff fd35 	bl	80004e8 <LL_RCC_HSI_IsReady>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d1fa      	bne.n	8000a7a <SystemClock_Config+0x22>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 8000a84:	2040      	movs	r0, #64	; 0x40
 8000a86:	f7ff fd43 	bl	8000510 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2255      	movs	r2, #85	; 0x55
 8000a8e:	2130      	movs	r1, #48	; 0x30
 8000a90:	2002      	movs	r0, #2
 8000a92:	f7ff fe13 	bl	80006bc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000a96:	f7ff fe31 	bl	80006fc <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a9a:	f7ff fdeb 	bl	8000674 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a9e:	bf00      	nop
 8000aa0:	f7ff fdf8 	bl	8000694 <LL_RCC_PLL_IsReady>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d1fa      	bne.n	8000aa0 <SystemClock_Config+0x48>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f7ff fd46 	bl	800053c <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000ab0:	2080      	movs	r0, #128	; 0x80
 8000ab2:	f7ff fd65 	bl	8000580 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff fd54 	bl	8000564 <LL_RCC_GetSysClkSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b0c      	cmp	r3, #12
 8000ac0:	d1fa      	bne.n	8000ab8 <SystemClock_Config+0x60>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 8000ac2:	2355      	movs	r3, #85	; 0x55
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	e002      	b.n	8000ace <SystemClock_Config+0x76>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f9      	bne.n	8000ac8 <SystemClock_Config+0x70>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fd53 	bl	8000580 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fd64 	bl	80005a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fd75 	bl	80005d0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <SystemClock_Config+0xa4>)
 8000ae8:	f001 f83c 	bl	8001b64 <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <SystemClock_Config+0xa4>)
 8000aee:	f001 f86f 	bl	8001bd0 <LL_SetSystemCoreClock>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	0a21fe80 	.word	0x0a21fe80

08000b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8000b42:	4847      	ldr	r0, [pc, #284]	; (8000c60 <MX_ADC1_Init+0x160>)
 8000b44:	f7ff fd72 	bl	800062c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000b48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b4c:	f7ff fde6 	bl	800071c <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fde3 	bl	800071c <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fbee 	bl	800134a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b72:	2303      	movs	r3, #3
 8000b74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fbe2 	bl	800134a <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000b86:	2300      	movs	r3, #0
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b9c:	f000 fa1a 	bl	8000fd4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bc4:	f000 fa2c 	bl	8001020 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bce:	f7ff fb9b 	bl	8000308 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bd8:	f7ff fc3a 	bl	8000450 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bdc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000be0:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	4619      	mov	r1, r3
 8000bec:	481d      	ldr	r0, [pc, #116]	; (8000c64 <MX_ADC1_Init+0x164>)
 8000bee:	f000 f9b1 	bl	8000f54 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000bf2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bf6:	f7ff fc40 	bl	800047a <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000bfa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bfe:	f7ff fc4e 	bl	800049e <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_ADC1_Init+0x168>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	099b      	lsrs	r3, r3, #6
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_ADC1_Init+0x16c>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	099a      	lsrs	r2, r3, #6
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_ADC1_Init+0x170>)
 8000c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c20:	08db      	lsrs	r3, r3, #3
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000c24:	e002      	b.n	8000c2c <MX_ADC1_Init+0x12c>
  {
    wait_loop_index--;
 8000c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f9      	bne.n	8000c26 <MX_ADC1_Init+0x126>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <MX_ADC1_Init+0x174>)
 8000c34:	2106      	movs	r1, #6
 8000c36:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c3a:	f7ff fb8a 	bl	8000352 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <MX_ADC1_Init+0x174>)
 8000c42:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c46:	f7ff fbb0 	bl	80003aa <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000c4a:	227f      	movs	r2, #127	; 0x7f
 8000c4c:	4909      	ldr	r1, [pc, #36]	; (8000c74 <MX_ADC1_Init+0x174>)
 8000c4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c52:	f7ff fbd5 	bl	8000400 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	; 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	001c0002 	.word	0x001c0002
 8000c64:	50000300 	.word	0x50000300
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	053e2d63 	.word	0x053e2d63
 8000c70:	cccccccd 	.word	0xcccccccd
 8000c74:	04300002 	.word	0x04300002

08000c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2220      	movs	r2, #32
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ffe6 	bl	8001c58 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
 8000c9a:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000c9c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000ca0:	f7ff fcaa 	bl	80005f8 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ca4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ca8:	f7ff fd50 	bl	800074c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff fd35 	bl	800071c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART2_TX_Pin;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 fb3a 	bl	800134a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000cea:	2307      	movs	r3, #7
 8000cec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f000 fb28 	bl	800134a <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 8000cfe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d02:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d10:	230c      	movs	r3, #12
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d24:	f000 fe8a 	bl	8001a3c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d2c:	f7ff fd92 	bl	8000854 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d30:	2100      	movs	r1, #0
 8000d32:	480f      	ldr	r0, [pc, #60]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d34:	f7ff fdb5 	bl	80008a2 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d3a:	f7ff fd7b 	bl	8000834 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d40:	f7ff fdd6 	bl	80008f0 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d46:	f7ff fd65 	bl	8000814 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000d4a:	bf00      	nop
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d4e:	f7ff fdf8 	bl	8000942 <LL_USART_IsActiveFlag_TEACK>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f9      	beq.n	8000d4c <MX_USART2_UART_Init+0xd4>
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART2_UART_Init+0xf8>)
 8000d5a:	f7ff fe06 	bl	800096a <LL_USART_IsActiveFlag_REACK>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f3      	beq.n	8000d4c <MX_USART2_UART_Init+0xd4>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3738      	adds	r7, #56	; 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40004400 	.word	0x40004400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fcc6 	bl	800071c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d90:	2002      	movs	r0, #2
 8000d92:	f7ff fcc3 	bl	800071c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <MX_GPIO_Init+0x54>)
 8000d9c:	f7ff fe08 	bl	80009b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000da6:	2301      	movs	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_GPIO_Init+0x54>)
 8000dbc:	f000 fac5 	bl	800134a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc0:	bf00      	nop
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	48000400 	.word	0x48000400

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f000 ff08 	bl	8001c68 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20008000 	.word	0x20008000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000070 	.word	0x20000070
 8000e8c:	200001c0 	.word	0x200001c0

08000e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0b      	ldr	r4, [pc, #44]	; (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ede:	f7ff ffd7 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f000 fec7 	bl	8001c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fd71 	bl	80009cc <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   r0, =_estack
 8000eec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000ef8:	08002608 	.word	0x08002608
  ldr r2, =_sbss
 8000efc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000f00:	200001bc 	.word	0x200001bc

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>

08000f06 <LL_ADC_REG_SetSequencerLength>:
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f023 020f 	bic.w	r2, r3, #15
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <LL_ADC_IsEnabled+0x18>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <LL_ADC_IsEnabled+0x1a>
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8000f62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f66:	f7ff ffe1 	bl	8000f2c <LL_ADC_IsEnabled>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <LL_ADC_CommonInit+0x78>)
 8000f6e:	f7ff ffdd 	bl	8000f2c <LL_ADC_IsEnabled>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4323      	orrs	r3, r4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d120      	bne.n	8000fbc <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d012      	beq.n	8000fa8 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <LL_ADC_CommonInit+0x7c>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6811      	ldr	r1, [r2, #0]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	6852      	ldr	r2, [r2, #4]
 8000f92:	4311      	orrs	r1, r2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	6892      	ldr	r2, [r2, #8]
 8000f98:	4311      	orrs	r1, r2
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	68d2      	ldr	r2, [r2, #12]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	e00b      	b.n	8000fc0 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <LL_ADC_CommonInit+0x7c>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	e001      	b.n	8000fc0 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	50000100 	.word	0x50000100
 8000fd0:	ffc030e0 	.word	0xffc030e0

08000fd4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <LL_ADC_IsEnabled>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d111      	bne.n	8001012 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff6:	f023 0318 	bic.w	r3, r3, #24
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	6852      	ldr	r2, [r2, #4]
 8001002:	4311      	orrs	r1, r2
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	6892      	ldr	r2, [r2, #8]
 8001008:	430a      	orrs	r2, r1
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	e001      	b.n	8001016 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ff7c 	bl	8000f2c <LL_ADC_IsEnabled>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d132      	bne.n	80010a0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d015      	beq.n	800106e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <LL_ADC_REG_Init+0x90>)
 8001048:	4013      	ands	r3, r2
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	6892      	ldr	r2, [r2, #8]
 8001052:	4311      	orrs	r1, r2
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	68d2      	ldr	r2, [r2, #12]
 8001058:	4311      	orrs	r1, r2
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	6912      	ldr	r2, [r2, #16]
 800105e:	4311      	orrs	r1, r2
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6952      	ldr	r2, [r2, #20]
 8001064:	430a      	orrs	r2, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	e011      	b.n	8001092 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <LL_ADC_REG_Init+0x90>)
 8001074:	4013      	ands	r3, r2
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	6811      	ldr	r1, [r2, #0]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	68d2      	ldr	r2, [r2, #12]
 800107e:	4311      	orrs	r1, r2
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	6912      	ldr	r2, [r2, #16]
 8001084:	4311      	orrs	r1, r2
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	6952      	ldr	r2, [r2, #20]
 800108a:	430a      	orrs	r2, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff34 	bl	8000f06 <LL_ADC_REG_SetSequencerLength>
 800109e:	e001      	b.n	80010a4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	fff0c01c 	.word	0xfff0c01c

080010b4 <LL_GPIO_SetPinMode>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	613b      	str	r3, [r7, #16]
  return result;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80010da:	2320      	movs	r3, #32
 80010dc:	e003      	b.n	80010e6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	fab3 f383 	clz	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2103      	movs	r1, #3
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	401a      	ands	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	61fb      	str	r3, [r7, #28]
  return result;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001108:	2320      	movs	r3, #32
 800110a:	e003      	b.n	8001114 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	431a      	orrs	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	372c      	adds	r7, #44	; 0x2c
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_GPIO_SetPinOutputType>:
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	605a      	str	r2, [r3, #4]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_GPIO_SetPinSpeed>:
{
 800115e:	b480      	push	{r7}
 8001160:	b08b      	sub	sp, #44	; 0x2c
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	613b      	str	r3, [r7, #16]
  return result;
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001184:	2320      	movs	r3, #32
 8001186:	e003      	b.n	8001190 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fab3 f383 	clz	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2103      	movs	r1, #3
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	61fb      	str	r3, [r7, #28]
  return result;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80011b2:	2320      	movs	r3, #32
 80011b4:	e003      	b.n	80011be <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	431a      	orrs	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	609a      	str	r2, [r3, #8]
}
 80011cc:	bf00      	nop
 80011ce:	372c      	adds	r7, #44	; 0x2c
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_GPIO_SetPinPull>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	; 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	613b      	str	r3, [r7, #16]
  return result;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80011fe:	2320      	movs	r3, #32
 8001200:	e003      	b.n	800120a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2103      	movs	r1, #3
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	401a      	ands	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	61fb      	str	r3, [r7, #28]
  return result;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800122c:	2320      	movs	r3, #32
 800122e:	e003      	b.n	8001238 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	431a      	orrs	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	60da      	str	r2, [r3, #12]
}
 8001246:	bf00      	nop
 8001248:	372c      	adds	r7, #44	; 0x2c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_GPIO_SetAFPin_0_7>:
{
 8001252:	b480      	push	{r7}
 8001254:	b08b      	sub	sp, #44	; 0x2c
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	613b      	str	r3, [r7, #16]
  return result;
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001278:	2320      	movs	r3, #32
 800127a:	e003      	b.n	8001284 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	210f      	movs	r1, #15
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	61fb      	str	r3, [r7, #28]
  return result;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80012a6:	2320      	movs	r3, #32
 80012a8:	e003      	b.n	80012b2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	431a      	orrs	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	621a      	str	r2, [r3, #32]
}
 80012c0:	bf00      	nop
 80012c2:	372c      	adds	r7, #44	; 0x2c
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_GPIO_SetAFPin_8_15>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	613b      	str	r3, [r7, #16]
  return result;
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80012f4:	2320      	movs	r3, #32
 80012f6:	e003      	b.n	8001300 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	210f      	movs	r1, #15
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	61fb      	str	r3, [r7, #28]
  return result;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001324:	2320      	movs	r3, #32
 8001326:	e003      	b.n	8001330 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	431a      	orrs	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800133e:	bf00      	nop
 8001340:	372c      	adds	r7, #44	; 0x2c
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b088      	sub	sp, #32
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	60fb      	str	r3, [r7, #12]
  return result;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <LL_GPIO_Init+0x26>
    return 32U;
 800136c:	2320      	movs	r3, #32
 800136e:	e003      	b.n	8001378 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800137a:	e048      	b.n	800140e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03a      	beq.n	8001408 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d003      	beq.n	80013a2 <LL_GPIO_Init+0x58>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d10e      	bne.n	80013c0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	461a      	mov	r2, r3
 80013a8:	69b9      	ldr	r1, [r7, #24]
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fed7 	bl	800115e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	461a      	mov	r2, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff feb7 	bl	800112e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	461a      	mov	r2, r3
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff05 	bl	80011d8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d111      	bne.n	80013fa <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2bff      	cmp	r3, #255	; 0xff
 80013da:	d807      	bhi.n	80013ec <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	461a      	mov	r2, r3
 80013e2:	69b9      	ldr	r1, [r7, #24]
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff34 	bl	8001252 <LL_GPIO_SetAFPin_0_7>
 80013ea:	e006      	b.n	80013fa <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	461a      	mov	r2, r3
 80013f2:	69b9      	ldr	r1, [r7, #24]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff69 	bl	80012cc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	461a      	mov	r2, r3
 8001400:	69b9      	ldr	r1, [r7, #24]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe56 	bl	80010b4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	3301      	adds	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1af      	bne.n	800137c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <LL_RCC_HSI_IsReady>:
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <LL_RCC_HSI_IsReady+0x24>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001438:	d101      	bne.n	800143e <LL_RCC_HSI_IsReady+0x16>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_RCC_HSI_IsReady+0x18>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <LL_RCC_LSE_IsReady>:
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <LL_RCC_LSE_IsReady+0x24>)
 8001456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b02      	cmp	r3, #2
 8001460:	d101      	bne.n	8001466 <LL_RCC_LSE_IsReady+0x16>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_RCC_LSE_IsReady+0x18>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <LL_RCC_GetSysClkSource>:
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <LL_RCC_GetSysClkSource+0x18>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 030c 	and.w	r3, r3, #12
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <LL_RCC_GetAHBPrescaler>:
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LL_RCC_GetAHBPrescaler+0x18>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <LL_RCC_GetAPB1Prescaler>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <LL_RCC_GetAPB2Prescaler>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <LL_RCC_GetUSARTClockSource>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <LL_RCC_GetUSARTClockSource+0x24>)
 80014f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	4313      	orrs	r3, r2
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000

08001510 <LL_RCC_GetUARTClockSource>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <LL_RCC_GetUARTClockSource+0x24>)
 800151a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	401a      	ands	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	4313      	orrs	r3, r2
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_PLL_GetMainSource>:
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LL_RCC_PLL_GetMainSource+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0303 	and.w	r3, r3, #3
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <LL_RCC_PLL_GetN>:
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <LL_RCC_PLL_GetN+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000

08001570 <LL_RCC_PLL_GetR>:
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <LL_RCC_PLL_GetR+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <LL_RCC_PLL_GetDivider>:
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <LL_RCC_PLL_GetDivider+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d132      	bne.n	8001620 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff94 	bl	80014e8 <LL_RCC_GetUSARTClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80015c6:	d016      	beq.n	80015f6 <LL_RCC_GetUSARTClockFreq+0x4e>
 80015c8:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80015cc:	d81c      	bhi.n	8001608 <LL_RCC_GetUSARTClockFreq+0x60>
 80015ce:	4a51      	ldr	r2, [pc, #324]	; (8001714 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d003      	beq.n	80015dc <LL_RCC_GetUSARTClockFreq+0x34>
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <LL_RCC_GetUSARTClockFreq+0x170>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d004      	beq.n	80015e4 <LL_RCC_GetUSARTClockFreq+0x3c>
 80015da:	e015      	b.n	8001608 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80015dc:	f000 f8f2 	bl	80017c4 <RCC_GetSystemClockFreq>
 80015e0:	60f8      	str	r0, [r7, #12]
        break;
 80015e2:	e092      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80015e4:	f7ff ff20 	bl	8001428 <LL_RCC_HSI_IsReady>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8082 	beq.w	80016f4 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 80015f0:	4b4a      	ldr	r3, [pc, #296]	; (800171c <LL_RCC_GetUSARTClockFreq+0x174>)
 80015f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80015f4:	e07e      	b.n	80016f4 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80015f6:	f7ff ff2b 	bl	8001450 <LL_RCC_LSE_IsReady>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d07b      	beq.n	80016f8 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8001600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001604:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001606:	e077      	b.n	80016f8 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001608:	f000 f8dc 	bl	80017c4 <RCC_GetSystemClockFreq>
 800160c:	4603      	mov	r3, r0
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f8fe 	bl	8001810 <RCC_GetHCLKClockFreq>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f928 	bl	800186c <RCC_GetPCLK2ClockFreq>
 800161c:	60f8      	str	r0, [r7, #12]
        break;
 800161e:	e074      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d131      	bne.n	800168a <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff5e 	bl	80014e8 <LL_RCC_GetUSARTClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8001632:	d015      	beq.n	8001660 <LL_RCC_GetUSARTClockFreq+0xb8>
 8001634:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8001638:	d81b      	bhi.n	8001672 <LL_RCC_GetUSARTClockFreq+0xca>
 800163a:	4a39      	ldr	r2, [pc, #228]	; (8001720 <LL_RCC_GetUSARTClockFreq+0x178>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d003      	beq.n	8001648 <LL_RCC_GetUSARTClockFreq+0xa0>
 8001640:	4a38      	ldr	r2, [pc, #224]	; (8001724 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d004      	beq.n	8001650 <LL_RCC_GetUSARTClockFreq+0xa8>
 8001646:	e014      	b.n	8001672 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001648:	f000 f8bc 	bl	80017c4 <RCC_GetSystemClockFreq>
 800164c:	60f8      	str	r0, [r7, #12]
        break;
 800164e:	e05c      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001650:	f7ff feea 	bl	8001428 <LL_RCC_HSI_IsReady>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d050      	beq.n	80016fc <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <LL_RCC_GetUSARTClockFreq+0x174>)
 800165c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800165e:	e04d      	b.n	80016fc <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001660:	f7ff fef6 	bl	8001450 <LL_RCC_LSE_IsReady>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d04a      	beq.n	8001700 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 800166a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800166e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001670:	e046      	b.n	8001700 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001672:	f000 f8a7 	bl	80017c4 <RCC_GetSystemClockFreq>
 8001676:	4603      	mov	r3, r0
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f8c9 	bl	8001810 <RCC_GetHCLKClockFreq>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8dd 	bl	8001840 <RCC_GetPCLK1ClockFreq>
 8001686:	60f8      	str	r0, [r7, #12]
        break;
 8001688:	e03f      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b30      	cmp	r3, #48	; 0x30
 800168e:	d13c      	bne.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <LL_RCC_GetUSARTClockSource>
 8001696:	4603      	mov	r3, r0
 8001698:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800169c:	d015      	beq.n	80016ca <LL_RCC_GetUSARTClockFreq+0x122>
 800169e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80016a2:	d81b      	bhi.n	80016dc <LL_RCC_GetUSARTClockFreq+0x134>
 80016a4:	4a20      	ldr	r2, [pc, #128]	; (8001728 <LL_RCC_GetUSARTClockFreq+0x180>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d003      	beq.n	80016b2 <LL_RCC_GetUSARTClockFreq+0x10a>
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <LL_RCC_GetUSARTClockFreq+0x184>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d004      	beq.n	80016ba <LL_RCC_GetUSARTClockFreq+0x112>
 80016b0:	e014      	b.n	80016dc <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80016b2:	f000 f887 	bl	80017c4 <RCC_GetSystemClockFreq>
 80016b6:	60f8      	str	r0, [r7, #12]
          break;
 80016b8:	e027      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80016ba:	f7ff feb5 	bl	8001428 <LL_RCC_HSI_IsReady>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01f      	beq.n	8001704 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <LL_RCC_GetUSARTClockFreq+0x174>)
 80016c6:	60fb      	str	r3, [r7, #12]
          }
          break;
 80016c8:	e01c      	b.n	8001704 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80016ca:	f7ff fec1 	bl	8001450 <LL_RCC_LSE_IsReady>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d019      	beq.n	8001708 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 80016d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d8:	60fb      	str	r3, [r7, #12]
          }
          break;
 80016da:	e015      	b.n	8001708 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80016dc:	f000 f872 	bl	80017c4 <RCC_GetSystemClockFreq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f894 	bl	8001810 <RCC_GetHCLKClockFreq>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f8a8 	bl	8001840 <RCC_GetPCLK1ClockFreq>
 80016f0:	60f8      	str	r0, [r7, #12]
          break;
 80016f2:	e00a      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 80016f4:	bf00      	nop
 80016f6:	e008      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 80016f8:	bf00      	nop
 80016fa:	e006      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 80016fc:	bf00      	nop
 80016fe:	e004      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8001700:	bf00      	nop
 8001702:	e002      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8001704:	bf00      	nop
 8001706:	e000      	b.n	800170a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8001708:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	00030001 	.word	0x00030001
 8001718:	00030002 	.word	0x00030002
 800171c:	00f42400 	.word	0x00f42400
 8001720:	000c0004 	.word	0x000c0004
 8001724:	000c0008 	.word	0x000c0008
 8001728:	00300010 	.word	0x00300010
 800172c:	00300020 	.word	0x00300020

08001730 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2bc0      	cmp	r3, #192	; 0xc0
 8001740:	d134      	bne.n	80017ac <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fee4 	bl	8001510 <LL_RCC_GetUARTClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800174e:	d015      	beq.n	800177c <LL_RCC_GetUARTClockFreq+0x4c>
 8001750:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8001754:	d81b      	bhi.n	800178e <LL_RCC_GetUARTClockFreq+0x5e>
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <LL_RCC_GetUARTClockFreq+0x88>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d003      	beq.n	8001764 <LL_RCC_GetUARTClockFreq+0x34>
 800175c:	4a17      	ldr	r2, [pc, #92]	; (80017bc <LL_RCC_GetUARTClockFreq+0x8c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d004      	beq.n	800176c <LL_RCC_GetUARTClockFreq+0x3c>
 8001762:	e014      	b.n	800178e <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001764:	f000 f82e 	bl	80017c4 <RCC_GetSystemClockFreq>
 8001768:	60f8      	str	r0, [r7, #12]
        break;
 800176a:	e01f      	b.n	80017ac <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800176c:	f7ff fe5c 	bl	8001428 <LL_RCC_HSI_IsReady>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d017      	beq.n	80017a6 <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <LL_RCC_GetUARTClockFreq+0x90>)
 8001778:	60fb      	str	r3, [r7, #12]
        }
        break;
 800177a:	e014      	b.n	80017a6 <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800177c:	f7ff fe68 	bl	8001450 <LL_RCC_LSE_IsReady>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d011      	beq.n	80017aa <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 8001786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800178c:	e00d      	b.n	80017aa <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800178e:	f000 f819 	bl	80017c4 <RCC_GetSystemClockFreq>
 8001792:	4603      	mov	r3, r0
 8001794:	4618      	mov	r0, r3
 8001796:	f000 f83b 	bl	8001810 <RCC_GetHCLKClockFreq>
 800179a:	4603      	mov	r3, r0
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f84f 	bl	8001840 <RCC_GetPCLK1ClockFreq>
 80017a2:	60f8      	str	r0, [r7, #12]
        break;
 80017a4:	e002      	b.n	80017ac <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 80017a6:	bf00      	nop
 80017a8:	e000      	b.n	80017ac <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 80017aa:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	00c00040 	.word	0x00c00040
 80017bc:	00c00080 	.word	0x00c00080
 80017c0:	00f42400 	.word	0x00f42400

080017c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80017ca:	f7ff fe55 	bl	8001478 <LL_RCC_GetSysClkSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d00c      	beq.n	80017ee <RCC_GetSystemClockFreq+0x2a>
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d80e      	bhi.n	80017f6 <RCC_GetSystemClockFreq+0x32>
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d002      	beq.n	80017e2 <RCC_GetSystemClockFreq+0x1e>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d003      	beq.n	80017e8 <RCC_GetSystemClockFreq+0x24>
 80017e0:	e009      	b.n	80017f6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <RCC_GetSystemClockFreq+0x44>)
 80017e4:	607b      	str	r3, [r7, #4]
      break;
 80017e6:	e009      	b.n	80017fc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <RCC_GetSystemClockFreq+0x48>)
 80017ea:	607b      	str	r3, [r7, #4]
      break;
 80017ec:	e006      	b.n	80017fc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80017ee:	f000 f853 	bl	8001898 <RCC_PLL_GetFreqDomain_SYS>
 80017f2:	6078      	str	r0, [r7, #4]
      break;
 80017f4:	e002      	b.n	80017fc <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <RCC_GetSystemClockFreq+0x44>)
 80017f8:	607b      	str	r3, [r7, #4]
      break;
 80017fa:	bf00      	nop
  }

  return frequency;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001818:	f7ff fe3c 	bl	8001494 <LL_RCC_GetAHBPrescaler>
 800181c:	4603      	mov	r3, r0
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <RCC_GetHCLKClockFreq+0x2c>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	08002584 	.word	0x08002584

08001840 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001848:	f7ff fe32 	bl	80014b0 <LL_RCC_GetAPB1Prescaler>
 800184c:	4603      	mov	r3, r0
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <RCC_GetPCLK1ClockFreq+0x28>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	08002594 	.word	0x08002594

0800186c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001874:	f7ff fe2a 	bl	80014cc <LL_RCC_GetAPB2Prescaler>
 8001878:	4603      	mov	r3, r0
 800187a:	0adb      	lsrs	r3, r3, #11
 800187c:	4a05      	ldr	r2, [pc, #20]	; (8001894 <RCC_GetPCLK2ClockFreq+0x28>)
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	08002594 	.word	0x08002594

08001898 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800189e:	f7ff fe4b 	bl	8001538 <LL_RCC_PLL_GetMainSource>
 80018a2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d003      	beq.n	80018b2 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d003      	beq.n	80018b8 <RCC_PLL_GetFreqDomain_SYS+0x20>
 80018b0:	e005      	b.n	80018be <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80018b4:	607b      	str	r3, [r7, #4]
      break;
 80018b6:	e005      	b.n	80018c4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80018ba:	607b      	str	r3, [r7, #4]
      break;
 80018bc:	e002      	b.n	80018c4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80018c0:	607b      	str	r3, [r7, #4]
      break;
 80018c2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80018c4:	f7ff fe46 	bl	8001554 <LL_RCC_PLL_GetN>
 80018c8:	4602      	mov	r2, r0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	fb03 f402 	mul.w	r4, r3, r2
 80018d0:	f7ff fe5c 	bl	800158c <LL_RCC_PLL_GetDivider>
 80018d4:	4603      	mov	r3, r0
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	3301      	adds	r3, #1
 80018da:	fbb4 f4f3 	udiv	r4, r4, r3
 80018de:	f7ff fe47 	bl	8001570 <LL_RCC_PLL_GetR>
 80018e2:	4603      	mov	r3, r0
 80018e4:	0e5b      	lsrs	r3, r3, #25
 80018e6:	3301      	adds	r3, #1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	007a1200 	.word	0x007a1200

08001900 <LL_USART_IsEnabled>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <LL_USART_IsEnabled+0x18>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <LL_USART_IsEnabled+0x1a>
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_USART_SetPrescaler>:
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	f023 030f 	bic.w	r3, r3, #15
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b292      	uxth	r2, r2
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_USART_SetStopBitsLength>:
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	605a      	str	r2, [r3, #4]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_USART_SetHWFlowCtrl>:
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <LL_USART_SetBaudRate>:
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0b      	cmp	r3, #11
 80019ae:	d83c      	bhi.n	8001a2a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d039      	beq.n	8001a2a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019bc:	d122      	bne.n	8001a04 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <LL_USART_SetBaudRate+0x9c>)
 80019c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	005a      	lsls	r2, r3, #1
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	441a      	add	r2, r3
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	085b      	lsrs	r3, r3, #1
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	60da      	str	r2, [r3, #12]
}
 8001a02:	e012      	b.n	8001a2a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <LL_USART_SetBaudRate+0x9c>)
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	441a      	add	r2, r3
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	60da      	str	r2, [r3, #12]
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	0800259c 	.word	0x0800259c

08001a3c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff56 	bl	8001900 <LL_USART_IsEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d15b      	bne.n	8001b12 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <LL_USART_Init+0xe0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	6891      	ldr	r1, [r2, #8]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	6912      	ldr	r2, [r2, #16]
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	6952      	ldr	r2, [r2, #20]
 8001a70:	4311      	orrs	r1, r2
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	69d2      	ldr	r2, [r2, #28]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff62 	bl	800194e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff6f 	bl	8001974 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <LL_USART_Init+0xe4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d104      	bne.n	8001aa8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f7ff fd82 	bl	80015a8 <LL_RCC_GetUSARTClockFreq>
 8001aa4:	60b8      	str	r0, [r7, #8]
 8001aa6:	e019      	b.n	8001adc <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <LL_USART_Init+0xe8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d104      	bne.n	8001aba <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001ab0:	200c      	movs	r0, #12
 8001ab2:	f7ff fd79 	bl	80015a8 <LL_RCC_GetUSARTClockFreq>
 8001ab6:	60b8      	str	r0, [r7, #8]
 8001ab8:	e010      	b.n	8001adc <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART3)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <LL_USART_Init+0xec>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d104      	bne.n	8001acc <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8001ac2:	2030      	movs	r0, #48	; 0x30
 8001ac4:	f7ff fd70 	bl	80015a8 <LL_RCC_GetUSARTClockFreq>
 8001ac8:	60b8      	str	r0, [r7, #8]
 8001aca:	e007      	b.n	8001adc <LL_USART_Init+0xa0>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <LL_USART_Init+0xf0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d103      	bne.n	8001adc <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8001ad4:	20c0      	movs	r0, #192	; 0xc0
 8001ad6:	f7ff fe2b 	bl	8001730 <LL_RCC_GetUARTClockFreq>
 8001ada:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d011      	beq.n	8001b06 <LL_USART_Init+0xca>
        && (USART_InitStruct->BaudRate != 0U))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00d      	beq.n	8001b06 <LL_USART_Init+0xca>
    {
      status = SUCCESS;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	69d9      	ldr	r1, [r3, #28]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff4b 	bl	800199c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff0a 	bl	8001926 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	efff69f3 	.word	0xefff69f3
 8001b20:	40013800 	.word	0x40013800
 8001b24:	40004400 	.word	0x40004400
 8001b28:	40004800 	.word	0x40004800
 8001b2c:	40004c00 	.word	0x40004c00

08001b30 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <LL_InitTick+0x30>)
 8001b44:	3b01      	subs	r3, #1
 8001b46:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_InitTick+0x30>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <LL_InitTick+0x30>)
 8001b50:	2205      	movs	r2, #5
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001b6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffdd 	bl	8001b30 <LL_InitTick>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <LL_mDelay+0x4c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	d00c      	beq.n	8001bb6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8001ba2:	e008      	b.n	8001bb6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <LL_mDelay+0x4c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f3      	bne.n	8001ba4 <LL_mDelay+0x24>
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <LL_SetSystemCoreClock+0x1c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000

08001bf0 <sniprintf>:
 8001bf0:	b40c      	push	{r2, r3}
 8001bf2:	b530      	push	{r4, r5, lr}
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <sniprintf+0x64>)
 8001bf6:	1e0c      	subs	r4, r1, #0
 8001bf8:	681d      	ldr	r5, [r3, #0]
 8001bfa:	b09d      	sub	sp, #116	; 0x74
 8001bfc:	da08      	bge.n	8001c10 <sniprintf+0x20>
 8001bfe:	238b      	movs	r3, #139	; 0x8b
 8001c00:	602b      	str	r3, [r5, #0]
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295
 8001c06:	b01d      	add	sp, #116	; 0x74
 8001c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c0c:	b002      	add	sp, #8
 8001c0e:	4770      	bx	lr
 8001c10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001c14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001c18:	bf14      	ite	ne
 8001c1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001c1e:	4623      	moveq	r3, r4
 8001c20:	9304      	str	r3, [sp, #16]
 8001c22:	9307      	str	r3, [sp, #28]
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c28:	9002      	str	r0, [sp, #8]
 8001c2a:	9006      	str	r0, [sp, #24]
 8001c2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001c30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001c32:	ab21      	add	r3, sp, #132	; 0x84
 8001c34:	a902      	add	r1, sp, #8
 8001c36:	4628      	mov	r0, r5
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	f000 f993 	bl	8001f64 <_svfiprintf_r>
 8001c3e:	1c43      	adds	r3, r0, #1
 8001c40:	bfbc      	itt	lt
 8001c42:	238b      	movlt	r3, #139	; 0x8b
 8001c44:	602b      	strlt	r3, [r5, #0]
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	d0dd      	beq.n	8001c06 <sniprintf+0x16>
 8001c4a:	9b02      	ldr	r3, [sp, #8]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	e7d9      	b.n	8001c06 <sniprintf+0x16>
 8001c52:	bf00      	nop
 8001c54:	20000050 	.word	0x20000050

08001c58 <memset>:
 8001c58:	4402      	add	r2, r0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d100      	bne.n	8001c62 <memset+0xa>
 8001c60:	4770      	bx	lr
 8001c62:	f803 1b01 	strb.w	r1, [r3], #1
 8001c66:	e7f9      	b.n	8001c5c <memset+0x4>

08001c68 <__errno>:
 8001c68:	4b01      	ldr	r3, [pc, #4]	; (8001c70 <__errno+0x8>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000050 	.word	0x20000050

08001c74 <__libc_init_array>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	4d0d      	ldr	r5, [pc, #52]	; (8001cac <__libc_init_array+0x38>)
 8001c78:	4c0d      	ldr	r4, [pc, #52]	; (8001cb0 <__libc_init_array+0x3c>)
 8001c7a:	1b64      	subs	r4, r4, r5
 8001c7c:	10a4      	asrs	r4, r4, #2
 8001c7e:	2600      	movs	r6, #0
 8001c80:	42a6      	cmp	r6, r4
 8001c82:	d109      	bne.n	8001c98 <__libc_init_array+0x24>
 8001c84:	4d0b      	ldr	r5, [pc, #44]	; (8001cb4 <__libc_init_array+0x40>)
 8001c86:	4c0c      	ldr	r4, [pc, #48]	; (8001cb8 <__libc_init_array+0x44>)
 8001c88:	f000 fc6a 	bl	8002560 <_init>
 8001c8c:	1b64      	subs	r4, r4, r5
 8001c8e:	10a4      	asrs	r4, r4, #2
 8001c90:	2600      	movs	r6, #0
 8001c92:	42a6      	cmp	r6, r4
 8001c94:	d105      	bne.n	8001ca2 <__libc_init_array+0x2e>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c9c:	4798      	blx	r3
 8001c9e:	3601      	adds	r6, #1
 8001ca0:	e7ee      	b.n	8001c80 <__libc_init_array+0xc>
 8001ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ca6:	4798      	blx	r3
 8001ca8:	3601      	adds	r6, #1
 8001caa:	e7f2      	b.n	8001c92 <__libc_init_array+0x1e>
 8001cac:	08002600 	.word	0x08002600
 8001cb0:	08002600 	.word	0x08002600
 8001cb4:	08002600 	.word	0x08002600
 8001cb8:	08002604 	.word	0x08002604

08001cbc <__retarget_lock_acquire_recursive>:
 8001cbc:	4770      	bx	lr

08001cbe <__retarget_lock_release_recursive>:
 8001cbe:	4770      	bx	lr

08001cc0 <_free_r>:
 8001cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	d044      	beq.n	8001d50 <_free_r+0x90>
 8001cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cca:	9001      	str	r0, [sp, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f1a1 0404 	sub.w	r4, r1, #4
 8001cd2:	bfb8      	it	lt
 8001cd4:	18e4      	addlt	r4, r4, r3
 8001cd6:	f000 f8df 	bl	8001e98 <__malloc_lock>
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <_free_r+0x94>)
 8001cdc:	9801      	ldr	r0, [sp, #4]
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	b933      	cbnz	r3, 8001cf0 <_free_r+0x30>
 8001ce2:	6063      	str	r3, [r4, #4]
 8001ce4:	6014      	str	r4, [r2, #0]
 8001ce6:	b003      	add	sp, #12
 8001ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001cec:	f000 b8da 	b.w	8001ea4 <__malloc_unlock>
 8001cf0:	42a3      	cmp	r3, r4
 8001cf2:	d908      	bls.n	8001d06 <_free_r+0x46>
 8001cf4:	6825      	ldr	r5, [r4, #0]
 8001cf6:	1961      	adds	r1, r4, r5
 8001cf8:	428b      	cmp	r3, r1
 8001cfa:	bf01      	itttt	eq
 8001cfc:	6819      	ldreq	r1, [r3, #0]
 8001cfe:	685b      	ldreq	r3, [r3, #4]
 8001d00:	1949      	addeq	r1, r1, r5
 8001d02:	6021      	streq	r1, [r4, #0]
 8001d04:	e7ed      	b.n	8001ce2 <_free_r+0x22>
 8001d06:	461a      	mov	r2, r3
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	b10b      	cbz	r3, 8001d10 <_free_r+0x50>
 8001d0c:	42a3      	cmp	r3, r4
 8001d0e:	d9fa      	bls.n	8001d06 <_free_r+0x46>
 8001d10:	6811      	ldr	r1, [r2, #0]
 8001d12:	1855      	adds	r5, r2, r1
 8001d14:	42a5      	cmp	r5, r4
 8001d16:	d10b      	bne.n	8001d30 <_free_r+0x70>
 8001d18:	6824      	ldr	r4, [r4, #0]
 8001d1a:	4421      	add	r1, r4
 8001d1c:	1854      	adds	r4, r2, r1
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	6011      	str	r1, [r2, #0]
 8001d22:	d1e0      	bne.n	8001ce6 <_free_r+0x26>
 8001d24:	681c      	ldr	r4, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	6053      	str	r3, [r2, #4]
 8001d2a:	440c      	add	r4, r1
 8001d2c:	6014      	str	r4, [r2, #0]
 8001d2e:	e7da      	b.n	8001ce6 <_free_r+0x26>
 8001d30:	d902      	bls.n	8001d38 <_free_r+0x78>
 8001d32:	230c      	movs	r3, #12
 8001d34:	6003      	str	r3, [r0, #0]
 8001d36:	e7d6      	b.n	8001ce6 <_free_r+0x26>
 8001d38:	6825      	ldr	r5, [r4, #0]
 8001d3a:	1961      	adds	r1, r4, r5
 8001d3c:	428b      	cmp	r3, r1
 8001d3e:	bf04      	itt	eq
 8001d40:	6819      	ldreq	r1, [r3, #0]
 8001d42:	685b      	ldreq	r3, [r3, #4]
 8001d44:	6063      	str	r3, [r4, #4]
 8001d46:	bf04      	itt	eq
 8001d48:	1949      	addeq	r1, r1, r5
 8001d4a:	6021      	streq	r1, [r4, #0]
 8001d4c:	6054      	str	r4, [r2, #4]
 8001d4e:	e7ca      	b.n	8001ce6 <_free_r+0x26>
 8001d50:	b003      	add	sp, #12
 8001d52:	bd30      	pop	{r4, r5, pc}
 8001d54:	200001b4 	.word	0x200001b4

08001d58 <sbrk_aligned>:
 8001d58:	b570      	push	{r4, r5, r6, lr}
 8001d5a:	4e0e      	ldr	r6, [pc, #56]	; (8001d94 <sbrk_aligned+0x3c>)
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	6831      	ldr	r1, [r6, #0]
 8001d60:	4605      	mov	r5, r0
 8001d62:	b911      	cbnz	r1, 8001d6a <sbrk_aligned+0x12>
 8001d64:	f000 fba6 	bl	80024b4 <_sbrk_r>
 8001d68:	6030      	str	r0, [r6, #0]
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	f000 fba1 	bl	80024b4 <_sbrk_r>
 8001d72:	1c43      	adds	r3, r0, #1
 8001d74:	d00a      	beq.n	8001d8c <sbrk_aligned+0x34>
 8001d76:	1cc4      	adds	r4, r0, #3
 8001d78:	f024 0403 	bic.w	r4, r4, #3
 8001d7c:	42a0      	cmp	r0, r4
 8001d7e:	d007      	beq.n	8001d90 <sbrk_aligned+0x38>
 8001d80:	1a21      	subs	r1, r4, r0
 8001d82:	4628      	mov	r0, r5
 8001d84:	f000 fb96 	bl	80024b4 <_sbrk_r>
 8001d88:	3001      	adds	r0, #1
 8001d8a:	d101      	bne.n	8001d90 <sbrk_aligned+0x38>
 8001d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8001d90:	4620      	mov	r0, r4
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	200001b8 	.word	0x200001b8

08001d98 <_malloc_r>:
 8001d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d9c:	1ccd      	adds	r5, r1, #3
 8001d9e:	f025 0503 	bic.w	r5, r5, #3
 8001da2:	3508      	adds	r5, #8
 8001da4:	2d0c      	cmp	r5, #12
 8001da6:	bf38      	it	cc
 8001da8:	250c      	movcc	r5, #12
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	4607      	mov	r7, r0
 8001dae:	db01      	blt.n	8001db4 <_malloc_r+0x1c>
 8001db0:	42a9      	cmp	r1, r5
 8001db2:	d905      	bls.n	8001dc0 <_malloc_r+0x28>
 8001db4:	230c      	movs	r3, #12
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	2600      	movs	r6, #0
 8001dba:	4630      	mov	r0, r6
 8001dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001e94 <_malloc_r+0xfc>
 8001dc4:	f000 f868 	bl	8001e98 <__malloc_lock>
 8001dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8001dcc:	461c      	mov	r4, r3
 8001dce:	bb5c      	cbnz	r4, 8001e28 <_malloc_r+0x90>
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	4638      	mov	r0, r7
 8001dd4:	f7ff ffc0 	bl	8001d58 <sbrk_aligned>
 8001dd8:	1c43      	adds	r3, r0, #1
 8001dda:	4604      	mov	r4, r0
 8001ddc:	d155      	bne.n	8001e8a <_malloc_r+0xf2>
 8001dde:	f8d8 4000 	ldr.w	r4, [r8]
 8001de2:	4626      	mov	r6, r4
 8001de4:	2e00      	cmp	r6, #0
 8001de6:	d145      	bne.n	8001e74 <_malloc_r+0xdc>
 8001de8:	2c00      	cmp	r4, #0
 8001dea:	d048      	beq.n	8001e7e <_malloc_r+0xe6>
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	4631      	mov	r1, r6
 8001df0:	4638      	mov	r0, r7
 8001df2:	eb04 0903 	add.w	r9, r4, r3
 8001df6:	f000 fb5d 	bl	80024b4 <_sbrk_r>
 8001dfa:	4581      	cmp	r9, r0
 8001dfc:	d13f      	bne.n	8001e7e <_malloc_r+0xe6>
 8001dfe:	6821      	ldr	r1, [r4, #0]
 8001e00:	1a6d      	subs	r5, r5, r1
 8001e02:	4629      	mov	r1, r5
 8001e04:	4638      	mov	r0, r7
 8001e06:	f7ff ffa7 	bl	8001d58 <sbrk_aligned>
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	d037      	beq.n	8001e7e <_malloc_r+0xe6>
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	442b      	add	r3, r5
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	f8d8 3000 	ldr.w	r3, [r8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d038      	beq.n	8001e8e <_malloc_r+0xf6>
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	42a2      	cmp	r2, r4
 8001e20:	d12b      	bne.n	8001e7a <_malloc_r+0xe2>
 8001e22:	2200      	movs	r2, #0
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e00f      	b.n	8001e48 <_malloc_r+0xb0>
 8001e28:	6822      	ldr	r2, [r4, #0]
 8001e2a:	1b52      	subs	r2, r2, r5
 8001e2c:	d41f      	bmi.n	8001e6e <_malloc_r+0xd6>
 8001e2e:	2a0b      	cmp	r2, #11
 8001e30:	d917      	bls.n	8001e62 <_malloc_r+0xca>
 8001e32:	1961      	adds	r1, r4, r5
 8001e34:	42a3      	cmp	r3, r4
 8001e36:	6025      	str	r5, [r4, #0]
 8001e38:	bf18      	it	ne
 8001e3a:	6059      	strne	r1, [r3, #4]
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	bf08      	it	eq
 8001e40:	f8c8 1000 	streq.w	r1, [r8]
 8001e44:	5162      	str	r2, [r4, r5]
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	4638      	mov	r0, r7
 8001e4a:	f104 060b 	add.w	r6, r4, #11
 8001e4e:	f000 f829 	bl	8001ea4 <__malloc_unlock>
 8001e52:	f026 0607 	bic.w	r6, r6, #7
 8001e56:	1d23      	adds	r3, r4, #4
 8001e58:	1af2      	subs	r2, r6, r3
 8001e5a:	d0ae      	beq.n	8001dba <_malloc_r+0x22>
 8001e5c:	1b9b      	subs	r3, r3, r6
 8001e5e:	50a3      	str	r3, [r4, r2]
 8001e60:	e7ab      	b.n	8001dba <_malloc_r+0x22>
 8001e62:	42a3      	cmp	r3, r4
 8001e64:	6862      	ldr	r2, [r4, #4]
 8001e66:	d1dd      	bne.n	8001e24 <_malloc_r+0x8c>
 8001e68:	f8c8 2000 	str.w	r2, [r8]
 8001e6c:	e7ec      	b.n	8001e48 <_malloc_r+0xb0>
 8001e6e:	4623      	mov	r3, r4
 8001e70:	6864      	ldr	r4, [r4, #4]
 8001e72:	e7ac      	b.n	8001dce <_malloc_r+0x36>
 8001e74:	4634      	mov	r4, r6
 8001e76:	6876      	ldr	r6, [r6, #4]
 8001e78:	e7b4      	b.n	8001de4 <_malloc_r+0x4c>
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	e7cc      	b.n	8001e18 <_malloc_r+0x80>
 8001e7e:	230c      	movs	r3, #12
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4638      	mov	r0, r7
 8001e84:	f000 f80e 	bl	8001ea4 <__malloc_unlock>
 8001e88:	e797      	b.n	8001dba <_malloc_r+0x22>
 8001e8a:	6025      	str	r5, [r4, #0]
 8001e8c:	e7dc      	b.n	8001e48 <_malloc_r+0xb0>
 8001e8e:	605b      	str	r3, [r3, #4]
 8001e90:	deff      	udf	#255	; 0xff
 8001e92:	bf00      	nop
 8001e94:	200001b4 	.word	0x200001b4

08001e98 <__malloc_lock>:
 8001e98:	4801      	ldr	r0, [pc, #4]	; (8001ea0 <__malloc_lock+0x8>)
 8001e9a:	f7ff bf0f 	b.w	8001cbc <__retarget_lock_acquire_recursive>
 8001e9e:	bf00      	nop
 8001ea0:	200001b0 	.word	0x200001b0

08001ea4 <__malloc_unlock>:
 8001ea4:	4801      	ldr	r0, [pc, #4]	; (8001eac <__malloc_unlock+0x8>)
 8001ea6:	f7ff bf0a 	b.w	8001cbe <__retarget_lock_release_recursive>
 8001eaa:	bf00      	nop
 8001eac:	200001b0 	.word	0x200001b0

08001eb0 <__ssputs_r>:
 8001eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb4:	688e      	ldr	r6, [r1, #8]
 8001eb6:	461f      	mov	r7, r3
 8001eb8:	42be      	cmp	r6, r7
 8001eba:	680b      	ldr	r3, [r1, #0]
 8001ebc:	4682      	mov	sl, r0
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	d82c      	bhi.n	8001f1e <__ssputs_r+0x6e>
 8001ec4:	898a      	ldrh	r2, [r1, #12]
 8001ec6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001eca:	d026      	beq.n	8001f1a <__ssputs_r+0x6a>
 8001ecc:	6965      	ldr	r5, [r4, #20]
 8001ece:	6909      	ldr	r1, [r1, #16]
 8001ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ed4:	eba3 0901 	sub.w	r9, r3, r1
 8001ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001edc:	1c7b      	adds	r3, r7, #1
 8001ede:	444b      	add	r3, r9
 8001ee0:	106d      	asrs	r5, r5, #1
 8001ee2:	429d      	cmp	r5, r3
 8001ee4:	bf38      	it	cc
 8001ee6:	461d      	movcc	r5, r3
 8001ee8:	0553      	lsls	r3, r2, #21
 8001eea:	d527      	bpl.n	8001f3c <__ssputs_r+0x8c>
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7ff ff53 	bl	8001d98 <_malloc_r>
 8001ef2:	4606      	mov	r6, r0
 8001ef4:	b360      	cbz	r0, 8001f50 <__ssputs_r+0xa0>
 8001ef6:	6921      	ldr	r1, [r4, #16]
 8001ef8:	464a      	mov	r2, r9
 8001efa:	f000 faeb 	bl	80024d4 <memcpy>
 8001efe:	89a3      	ldrh	r3, [r4, #12]
 8001f00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	6126      	str	r6, [r4, #16]
 8001f0c:	6165      	str	r5, [r4, #20]
 8001f0e:	444e      	add	r6, r9
 8001f10:	eba5 0509 	sub.w	r5, r5, r9
 8001f14:	6026      	str	r6, [r4, #0]
 8001f16:	60a5      	str	r5, [r4, #8]
 8001f18:	463e      	mov	r6, r7
 8001f1a:	42be      	cmp	r6, r7
 8001f1c:	d900      	bls.n	8001f20 <__ssputs_r+0x70>
 8001f1e:	463e      	mov	r6, r7
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	4632      	mov	r2, r6
 8001f24:	4641      	mov	r1, r8
 8001f26:	f000 faab 	bl	8002480 <memmove>
 8001f2a:	68a3      	ldr	r3, [r4, #8]
 8001f2c:	1b9b      	subs	r3, r3, r6
 8001f2e:	60a3      	str	r3, [r4, #8]
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	4433      	add	r3, r6
 8001f34:	6023      	str	r3, [r4, #0]
 8001f36:	2000      	movs	r0, #0
 8001f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f3c:	462a      	mov	r2, r5
 8001f3e:	f000 fad7 	bl	80024f0 <_realloc_r>
 8001f42:	4606      	mov	r6, r0
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d1e0      	bne.n	8001f0a <__ssputs_r+0x5a>
 8001f48:	6921      	ldr	r1, [r4, #16]
 8001f4a:	4650      	mov	r0, sl
 8001f4c:	f7ff feb8 	bl	8001cc0 <_free_r>
 8001f50:	230c      	movs	r3, #12
 8001f52:	f8ca 3000 	str.w	r3, [sl]
 8001f56:	89a3      	ldrh	r3, [r4, #12]
 8001f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5c:	81a3      	strh	r3, [r4, #12]
 8001f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f62:	e7e9      	b.n	8001f38 <__ssputs_r+0x88>

08001f64 <_svfiprintf_r>:
 8001f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f68:	4698      	mov	r8, r3
 8001f6a:	898b      	ldrh	r3, [r1, #12]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	b09d      	sub	sp, #116	; 0x74
 8001f70:	4607      	mov	r7, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	4614      	mov	r4, r2
 8001f76:	d50e      	bpl.n	8001f96 <_svfiprintf_r+0x32>
 8001f78:	690b      	ldr	r3, [r1, #16]
 8001f7a:	b963      	cbnz	r3, 8001f96 <_svfiprintf_r+0x32>
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	f7ff ff0b 	bl	8001d98 <_malloc_r>
 8001f82:	6028      	str	r0, [r5, #0]
 8001f84:	6128      	str	r0, [r5, #16]
 8001f86:	b920      	cbnz	r0, 8001f92 <_svfiprintf_r+0x2e>
 8001f88:	230c      	movs	r3, #12
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	e0d0      	b.n	8002134 <_svfiprintf_r+0x1d0>
 8001f92:	2340      	movs	r3, #64	; 0x40
 8001f94:	616b      	str	r3, [r5, #20]
 8001f96:	2300      	movs	r3, #0
 8001f98:	9309      	str	r3, [sp, #36]	; 0x24
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001fa4:	2330      	movs	r3, #48	; 0x30
 8001fa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800214c <_svfiprintf_r+0x1e8>
 8001faa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fae:	f04f 0901 	mov.w	r9, #1
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	469a      	mov	sl, r3
 8001fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fba:	b10a      	cbz	r2, 8001fc0 <_svfiprintf_r+0x5c>
 8001fbc:	2a25      	cmp	r2, #37	; 0x25
 8001fbe:	d1f9      	bne.n	8001fb4 <_svfiprintf_r+0x50>
 8001fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8001fc4:	d00b      	beq.n	8001fde <_svfiprintf_r+0x7a>
 8001fc6:	465b      	mov	r3, fp
 8001fc8:	4622      	mov	r2, r4
 8001fca:	4629      	mov	r1, r5
 8001fcc:	4638      	mov	r0, r7
 8001fce:	f7ff ff6f 	bl	8001eb0 <__ssputs_r>
 8001fd2:	3001      	adds	r0, #1
 8001fd4:	f000 80a9 	beq.w	800212a <_svfiprintf_r+0x1c6>
 8001fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fda:	445a      	add	r2, fp
 8001fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8001fde:	f89a 3000 	ldrb.w	r3, [sl]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80a1 	beq.w	800212a <_svfiprintf_r+0x1c6>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f04f 32ff 	mov.w	r2, #4294967295
 8001fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ff2:	f10a 0a01 	add.w	sl, sl, #1
 8001ff6:	9304      	str	r3, [sp, #16]
 8001ff8:	9307      	str	r3, [sp, #28]
 8001ffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ffe:	931a      	str	r3, [sp, #104]	; 0x68
 8002000:	4654      	mov	r4, sl
 8002002:	2205      	movs	r2, #5
 8002004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002008:	4850      	ldr	r0, [pc, #320]	; (800214c <_svfiprintf_r+0x1e8>)
 800200a:	f7fe f909 	bl	8000220 <memchr>
 800200e:	9a04      	ldr	r2, [sp, #16]
 8002010:	b9d8      	cbnz	r0, 800204a <_svfiprintf_r+0xe6>
 8002012:	06d0      	lsls	r0, r2, #27
 8002014:	bf44      	itt	mi
 8002016:	2320      	movmi	r3, #32
 8002018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800201c:	0711      	lsls	r1, r2, #28
 800201e:	bf44      	itt	mi
 8002020:	232b      	movmi	r3, #43	; 0x2b
 8002022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002026:	f89a 3000 	ldrb.w	r3, [sl]
 800202a:	2b2a      	cmp	r3, #42	; 0x2a
 800202c:	d015      	beq.n	800205a <_svfiprintf_r+0xf6>
 800202e:	9a07      	ldr	r2, [sp, #28]
 8002030:	4654      	mov	r4, sl
 8002032:	2000      	movs	r0, #0
 8002034:	f04f 0c0a 	mov.w	ip, #10
 8002038:	4621      	mov	r1, r4
 800203a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800203e:	3b30      	subs	r3, #48	; 0x30
 8002040:	2b09      	cmp	r3, #9
 8002042:	d94d      	bls.n	80020e0 <_svfiprintf_r+0x17c>
 8002044:	b1b0      	cbz	r0, 8002074 <_svfiprintf_r+0x110>
 8002046:	9207      	str	r2, [sp, #28]
 8002048:	e014      	b.n	8002074 <_svfiprintf_r+0x110>
 800204a:	eba0 0308 	sub.w	r3, r0, r8
 800204e:	fa09 f303 	lsl.w	r3, r9, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	9304      	str	r3, [sp, #16]
 8002056:	46a2      	mov	sl, r4
 8002058:	e7d2      	b.n	8002000 <_svfiprintf_r+0x9c>
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	1d19      	adds	r1, r3, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	9103      	str	r1, [sp, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	bfbb      	ittet	lt
 8002066:	425b      	neglt	r3, r3
 8002068:	f042 0202 	orrlt.w	r2, r2, #2
 800206c:	9307      	strge	r3, [sp, #28]
 800206e:	9307      	strlt	r3, [sp, #28]
 8002070:	bfb8      	it	lt
 8002072:	9204      	strlt	r2, [sp, #16]
 8002074:	7823      	ldrb	r3, [r4, #0]
 8002076:	2b2e      	cmp	r3, #46	; 0x2e
 8002078:	d10c      	bne.n	8002094 <_svfiprintf_r+0x130>
 800207a:	7863      	ldrb	r3, [r4, #1]
 800207c:	2b2a      	cmp	r3, #42	; 0x2a
 800207e:	d134      	bne.n	80020ea <_svfiprintf_r+0x186>
 8002080:	9b03      	ldr	r3, [sp, #12]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	9203      	str	r2, [sp, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	bfb8      	it	lt
 800208c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002090:	3402      	adds	r4, #2
 8002092:	9305      	str	r3, [sp, #20]
 8002094:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800215c <_svfiprintf_r+0x1f8>
 8002098:	7821      	ldrb	r1, [r4, #0]
 800209a:	2203      	movs	r2, #3
 800209c:	4650      	mov	r0, sl
 800209e:	f7fe f8bf 	bl	8000220 <memchr>
 80020a2:	b138      	cbz	r0, 80020b4 <_svfiprintf_r+0x150>
 80020a4:	9b04      	ldr	r3, [sp, #16]
 80020a6:	eba0 000a 	sub.w	r0, r0, sl
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	4082      	lsls	r2, r0
 80020ae:	4313      	orrs	r3, r2
 80020b0:	3401      	adds	r4, #1
 80020b2:	9304      	str	r3, [sp, #16]
 80020b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020b8:	4825      	ldr	r0, [pc, #148]	; (8002150 <_svfiprintf_r+0x1ec>)
 80020ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020be:	2206      	movs	r2, #6
 80020c0:	f7fe f8ae 	bl	8000220 <memchr>
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d038      	beq.n	800213a <_svfiprintf_r+0x1d6>
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <_svfiprintf_r+0x1f0>)
 80020ca:	bb1b      	cbnz	r3, 8002114 <_svfiprintf_r+0x1b0>
 80020cc:	9b03      	ldr	r3, [sp, #12]
 80020ce:	3307      	adds	r3, #7
 80020d0:	f023 0307 	bic.w	r3, r3, #7
 80020d4:	3308      	adds	r3, #8
 80020d6:	9303      	str	r3, [sp, #12]
 80020d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020da:	4433      	add	r3, r6
 80020dc:	9309      	str	r3, [sp, #36]	; 0x24
 80020de:	e768      	b.n	8001fb2 <_svfiprintf_r+0x4e>
 80020e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80020e4:	460c      	mov	r4, r1
 80020e6:	2001      	movs	r0, #1
 80020e8:	e7a6      	b.n	8002038 <_svfiprintf_r+0xd4>
 80020ea:	2300      	movs	r3, #0
 80020ec:	3401      	adds	r4, #1
 80020ee:	9305      	str	r3, [sp, #20]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 0c0a 	mov.w	ip, #10
 80020f6:	4620      	mov	r0, r4
 80020f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020fc:	3a30      	subs	r2, #48	; 0x30
 80020fe:	2a09      	cmp	r2, #9
 8002100:	d903      	bls.n	800210a <_svfiprintf_r+0x1a6>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0c6      	beq.n	8002094 <_svfiprintf_r+0x130>
 8002106:	9105      	str	r1, [sp, #20]
 8002108:	e7c4      	b.n	8002094 <_svfiprintf_r+0x130>
 800210a:	fb0c 2101 	mla	r1, ip, r1, r2
 800210e:	4604      	mov	r4, r0
 8002110:	2301      	movs	r3, #1
 8002112:	e7f0      	b.n	80020f6 <_svfiprintf_r+0x192>
 8002114:	ab03      	add	r3, sp, #12
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	462a      	mov	r2, r5
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <_svfiprintf_r+0x1f4>)
 800211c:	a904      	add	r1, sp, #16
 800211e:	4638      	mov	r0, r7
 8002120:	f3af 8000 	nop.w
 8002124:	1c42      	adds	r2, r0, #1
 8002126:	4606      	mov	r6, r0
 8002128:	d1d6      	bne.n	80020d8 <_svfiprintf_r+0x174>
 800212a:	89ab      	ldrh	r3, [r5, #12]
 800212c:	065b      	lsls	r3, r3, #25
 800212e:	f53f af2d 	bmi.w	8001f8c <_svfiprintf_r+0x28>
 8002132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002134:	b01d      	add	sp, #116	; 0x74
 8002136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800213a:	ab03      	add	r3, sp, #12
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	462a      	mov	r2, r5
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <_svfiprintf_r+0x1f4>)
 8002142:	a904      	add	r1, sp, #16
 8002144:	4638      	mov	r0, r7
 8002146:	f000 f879 	bl	800223c <_printf_i>
 800214a:	e7eb      	b.n	8002124 <_svfiprintf_r+0x1c0>
 800214c:	080025cc 	.word	0x080025cc
 8002150:	080025d6 	.word	0x080025d6
 8002154:	00000000 	.word	0x00000000
 8002158:	08001eb1 	.word	0x08001eb1
 800215c:	080025d2 	.word	0x080025d2

08002160 <_printf_common>:
 8002160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002164:	4616      	mov	r6, r2
 8002166:	4699      	mov	r9, r3
 8002168:	688a      	ldr	r2, [r1, #8]
 800216a:	690b      	ldr	r3, [r1, #16]
 800216c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002170:	4293      	cmp	r3, r2
 8002172:	bfb8      	it	lt
 8002174:	4613      	movlt	r3, r2
 8002176:	6033      	str	r3, [r6, #0]
 8002178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800217c:	4607      	mov	r7, r0
 800217e:	460c      	mov	r4, r1
 8002180:	b10a      	cbz	r2, 8002186 <_printf_common+0x26>
 8002182:	3301      	adds	r3, #1
 8002184:	6033      	str	r3, [r6, #0]
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	0699      	lsls	r1, r3, #26
 800218a:	bf42      	ittt	mi
 800218c:	6833      	ldrmi	r3, [r6, #0]
 800218e:	3302      	addmi	r3, #2
 8002190:	6033      	strmi	r3, [r6, #0]
 8002192:	6825      	ldr	r5, [r4, #0]
 8002194:	f015 0506 	ands.w	r5, r5, #6
 8002198:	d106      	bne.n	80021a8 <_printf_common+0x48>
 800219a:	f104 0a19 	add.w	sl, r4, #25
 800219e:	68e3      	ldr	r3, [r4, #12]
 80021a0:	6832      	ldr	r2, [r6, #0]
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	42ab      	cmp	r3, r5
 80021a6:	dc26      	bgt.n	80021f6 <_printf_common+0x96>
 80021a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80021ac:	1e13      	subs	r3, r2, #0
 80021ae:	6822      	ldr	r2, [r4, #0]
 80021b0:	bf18      	it	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	0692      	lsls	r2, r2, #26
 80021b6:	d42b      	bmi.n	8002210 <_printf_common+0xb0>
 80021b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021bc:	4649      	mov	r1, r9
 80021be:	4638      	mov	r0, r7
 80021c0:	47c0      	blx	r8
 80021c2:	3001      	adds	r0, #1
 80021c4:	d01e      	beq.n	8002204 <_printf_common+0xa4>
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	6922      	ldr	r2, [r4, #16]
 80021ca:	f003 0306 	and.w	r3, r3, #6
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf02      	ittt	eq
 80021d2:	68e5      	ldreq	r5, [r4, #12]
 80021d4:	6833      	ldreq	r3, [r6, #0]
 80021d6:	1aed      	subeq	r5, r5, r3
 80021d8:	68a3      	ldr	r3, [r4, #8]
 80021da:	bf0c      	ite	eq
 80021dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021e0:	2500      	movne	r5, #0
 80021e2:	4293      	cmp	r3, r2
 80021e4:	bfc4      	itt	gt
 80021e6:	1a9b      	subgt	r3, r3, r2
 80021e8:	18ed      	addgt	r5, r5, r3
 80021ea:	2600      	movs	r6, #0
 80021ec:	341a      	adds	r4, #26
 80021ee:	42b5      	cmp	r5, r6
 80021f0:	d11a      	bne.n	8002228 <_printf_common+0xc8>
 80021f2:	2000      	movs	r0, #0
 80021f4:	e008      	b.n	8002208 <_printf_common+0xa8>
 80021f6:	2301      	movs	r3, #1
 80021f8:	4652      	mov	r2, sl
 80021fa:	4649      	mov	r1, r9
 80021fc:	4638      	mov	r0, r7
 80021fe:	47c0      	blx	r8
 8002200:	3001      	adds	r0, #1
 8002202:	d103      	bne.n	800220c <_printf_common+0xac>
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220c:	3501      	adds	r5, #1
 800220e:	e7c6      	b.n	800219e <_printf_common+0x3e>
 8002210:	18e1      	adds	r1, r4, r3
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	2030      	movs	r0, #48	; 0x30
 8002216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800221a:	4422      	add	r2, r4
 800221c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002224:	3302      	adds	r3, #2
 8002226:	e7c7      	b.n	80021b8 <_printf_common+0x58>
 8002228:	2301      	movs	r3, #1
 800222a:	4622      	mov	r2, r4
 800222c:	4649      	mov	r1, r9
 800222e:	4638      	mov	r0, r7
 8002230:	47c0      	blx	r8
 8002232:	3001      	adds	r0, #1
 8002234:	d0e6      	beq.n	8002204 <_printf_common+0xa4>
 8002236:	3601      	adds	r6, #1
 8002238:	e7d9      	b.n	80021ee <_printf_common+0x8e>
	...

0800223c <_printf_i>:
 800223c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002240:	7e0f      	ldrb	r7, [r1, #24]
 8002242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002244:	2f78      	cmp	r7, #120	; 0x78
 8002246:	4691      	mov	r9, r2
 8002248:	4680      	mov	r8, r0
 800224a:	460c      	mov	r4, r1
 800224c:	469a      	mov	sl, r3
 800224e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002252:	d807      	bhi.n	8002264 <_printf_i+0x28>
 8002254:	2f62      	cmp	r7, #98	; 0x62
 8002256:	d80a      	bhi.n	800226e <_printf_i+0x32>
 8002258:	2f00      	cmp	r7, #0
 800225a:	f000 80d4 	beq.w	8002406 <_printf_i+0x1ca>
 800225e:	2f58      	cmp	r7, #88	; 0x58
 8002260:	f000 80c0 	beq.w	80023e4 <_printf_i+0x1a8>
 8002264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800226c:	e03a      	b.n	80022e4 <_printf_i+0xa8>
 800226e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002272:	2b15      	cmp	r3, #21
 8002274:	d8f6      	bhi.n	8002264 <_printf_i+0x28>
 8002276:	a101      	add	r1, pc, #4	; (adr r1, 800227c <_printf_i+0x40>)
 8002278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800227c:	080022d5 	.word	0x080022d5
 8002280:	080022e9 	.word	0x080022e9
 8002284:	08002265 	.word	0x08002265
 8002288:	08002265 	.word	0x08002265
 800228c:	08002265 	.word	0x08002265
 8002290:	08002265 	.word	0x08002265
 8002294:	080022e9 	.word	0x080022e9
 8002298:	08002265 	.word	0x08002265
 800229c:	08002265 	.word	0x08002265
 80022a0:	08002265 	.word	0x08002265
 80022a4:	08002265 	.word	0x08002265
 80022a8:	080023ed 	.word	0x080023ed
 80022ac:	08002315 	.word	0x08002315
 80022b0:	080023a7 	.word	0x080023a7
 80022b4:	08002265 	.word	0x08002265
 80022b8:	08002265 	.word	0x08002265
 80022bc:	0800240f 	.word	0x0800240f
 80022c0:	08002265 	.word	0x08002265
 80022c4:	08002315 	.word	0x08002315
 80022c8:	08002265 	.word	0x08002265
 80022cc:	08002265 	.word	0x08002265
 80022d0:	080023af 	.word	0x080023af
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	1d1a      	adds	r2, r3, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	602a      	str	r2, [r5, #0]
 80022dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022e4:	2301      	movs	r3, #1
 80022e6:	e09f      	b.n	8002428 <_printf_i+0x1ec>
 80022e8:	6820      	ldr	r0, [r4, #0]
 80022ea:	682b      	ldr	r3, [r5, #0]
 80022ec:	0607      	lsls	r7, r0, #24
 80022ee:	f103 0104 	add.w	r1, r3, #4
 80022f2:	6029      	str	r1, [r5, #0]
 80022f4:	d501      	bpl.n	80022fa <_printf_i+0xbe>
 80022f6:	681e      	ldr	r6, [r3, #0]
 80022f8:	e003      	b.n	8002302 <_printf_i+0xc6>
 80022fa:	0646      	lsls	r6, r0, #25
 80022fc:	d5fb      	bpl.n	80022f6 <_printf_i+0xba>
 80022fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002302:	2e00      	cmp	r6, #0
 8002304:	da03      	bge.n	800230e <_printf_i+0xd2>
 8002306:	232d      	movs	r3, #45	; 0x2d
 8002308:	4276      	negs	r6, r6
 800230a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800230e:	485a      	ldr	r0, [pc, #360]	; (8002478 <_printf_i+0x23c>)
 8002310:	230a      	movs	r3, #10
 8002312:	e012      	b.n	800233a <_printf_i+0xfe>
 8002314:	682b      	ldr	r3, [r5, #0]
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	1d19      	adds	r1, r3, #4
 800231a:	6029      	str	r1, [r5, #0]
 800231c:	0605      	lsls	r5, r0, #24
 800231e:	d501      	bpl.n	8002324 <_printf_i+0xe8>
 8002320:	681e      	ldr	r6, [r3, #0]
 8002322:	e002      	b.n	800232a <_printf_i+0xee>
 8002324:	0641      	lsls	r1, r0, #25
 8002326:	d5fb      	bpl.n	8002320 <_printf_i+0xe4>
 8002328:	881e      	ldrh	r6, [r3, #0]
 800232a:	4853      	ldr	r0, [pc, #332]	; (8002478 <_printf_i+0x23c>)
 800232c:	2f6f      	cmp	r7, #111	; 0x6f
 800232e:	bf0c      	ite	eq
 8002330:	2308      	moveq	r3, #8
 8002332:	230a      	movne	r3, #10
 8002334:	2100      	movs	r1, #0
 8002336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800233a:	6865      	ldr	r5, [r4, #4]
 800233c:	60a5      	str	r5, [r4, #8]
 800233e:	2d00      	cmp	r5, #0
 8002340:	bfa2      	ittt	ge
 8002342:	6821      	ldrge	r1, [r4, #0]
 8002344:	f021 0104 	bicge.w	r1, r1, #4
 8002348:	6021      	strge	r1, [r4, #0]
 800234a:	b90e      	cbnz	r6, 8002350 <_printf_i+0x114>
 800234c:	2d00      	cmp	r5, #0
 800234e:	d04b      	beq.n	80023e8 <_printf_i+0x1ac>
 8002350:	4615      	mov	r5, r2
 8002352:	fbb6 f1f3 	udiv	r1, r6, r3
 8002356:	fb03 6711 	mls	r7, r3, r1, r6
 800235a:	5dc7      	ldrb	r7, [r0, r7]
 800235c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002360:	4637      	mov	r7, r6
 8002362:	42bb      	cmp	r3, r7
 8002364:	460e      	mov	r6, r1
 8002366:	d9f4      	bls.n	8002352 <_printf_i+0x116>
 8002368:	2b08      	cmp	r3, #8
 800236a:	d10b      	bne.n	8002384 <_printf_i+0x148>
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	07de      	lsls	r6, r3, #31
 8002370:	d508      	bpl.n	8002384 <_printf_i+0x148>
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	6861      	ldr	r1, [r4, #4]
 8002376:	4299      	cmp	r1, r3
 8002378:	bfde      	ittt	le
 800237a:	2330      	movle	r3, #48	; 0x30
 800237c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002380:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002384:	1b52      	subs	r2, r2, r5
 8002386:	6122      	str	r2, [r4, #16]
 8002388:	f8cd a000 	str.w	sl, [sp]
 800238c:	464b      	mov	r3, r9
 800238e:	aa03      	add	r2, sp, #12
 8002390:	4621      	mov	r1, r4
 8002392:	4640      	mov	r0, r8
 8002394:	f7ff fee4 	bl	8002160 <_printf_common>
 8002398:	3001      	adds	r0, #1
 800239a:	d14a      	bne.n	8002432 <_printf_i+0x1f6>
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	b004      	add	sp, #16
 80023a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f043 0320 	orr.w	r3, r3, #32
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	4833      	ldr	r0, [pc, #204]	; (800247c <_printf_i+0x240>)
 80023b0:	2778      	movs	r7, #120	; 0x78
 80023b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	6829      	ldr	r1, [r5, #0]
 80023ba:	061f      	lsls	r7, r3, #24
 80023bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80023c0:	d402      	bmi.n	80023c8 <_printf_i+0x18c>
 80023c2:	065f      	lsls	r7, r3, #25
 80023c4:	bf48      	it	mi
 80023c6:	b2b6      	uxthmi	r6, r6
 80023c8:	07df      	lsls	r7, r3, #31
 80023ca:	bf48      	it	mi
 80023cc:	f043 0320 	orrmi.w	r3, r3, #32
 80023d0:	6029      	str	r1, [r5, #0]
 80023d2:	bf48      	it	mi
 80023d4:	6023      	strmi	r3, [r4, #0]
 80023d6:	b91e      	cbnz	r6, 80023e0 <_printf_i+0x1a4>
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	f023 0320 	bic.w	r3, r3, #32
 80023de:	6023      	str	r3, [r4, #0]
 80023e0:	2310      	movs	r3, #16
 80023e2:	e7a7      	b.n	8002334 <_printf_i+0xf8>
 80023e4:	4824      	ldr	r0, [pc, #144]	; (8002478 <_printf_i+0x23c>)
 80023e6:	e7e4      	b.n	80023b2 <_printf_i+0x176>
 80023e8:	4615      	mov	r5, r2
 80023ea:	e7bd      	b.n	8002368 <_printf_i+0x12c>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	6826      	ldr	r6, [r4, #0]
 80023f0:	6961      	ldr	r1, [r4, #20]
 80023f2:	1d18      	adds	r0, r3, #4
 80023f4:	6028      	str	r0, [r5, #0]
 80023f6:	0635      	lsls	r5, r6, #24
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	d501      	bpl.n	8002400 <_printf_i+0x1c4>
 80023fc:	6019      	str	r1, [r3, #0]
 80023fe:	e002      	b.n	8002406 <_printf_i+0x1ca>
 8002400:	0670      	lsls	r0, r6, #25
 8002402:	d5fb      	bpl.n	80023fc <_printf_i+0x1c0>
 8002404:	8019      	strh	r1, [r3, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	6123      	str	r3, [r4, #16]
 800240a:	4615      	mov	r5, r2
 800240c:	e7bc      	b.n	8002388 <_printf_i+0x14c>
 800240e:	682b      	ldr	r3, [r5, #0]
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	602a      	str	r2, [r5, #0]
 8002414:	681d      	ldr	r5, [r3, #0]
 8002416:	6862      	ldr	r2, [r4, #4]
 8002418:	2100      	movs	r1, #0
 800241a:	4628      	mov	r0, r5
 800241c:	f7fd ff00 	bl	8000220 <memchr>
 8002420:	b108      	cbz	r0, 8002426 <_printf_i+0x1ea>
 8002422:	1b40      	subs	r0, r0, r5
 8002424:	6060      	str	r0, [r4, #4]
 8002426:	6863      	ldr	r3, [r4, #4]
 8002428:	6123      	str	r3, [r4, #16]
 800242a:	2300      	movs	r3, #0
 800242c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002430:	e7aa      	b.n	8002388 <_printf_i+0x14c>
 8002432:	6923      	ldr	r3, [r4, #16]
 8002434:	462a      	mov	r2, r5
 8002436:	4649      	mov	r1, r9
 8002438:	4640      	mov	r0, r8
 800243a:	47d0      	blx	sl
 800243c:	3001      	adds	r0, #1
 800243e:	d0ad      	beq.n	800239c <_printf_i+0x160>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	079b      	lsls	r3, r3, #30
 8002444:	d413      	bmi.n	800246e <_printf_i+0x232>
 8002446:	68e0      	ldr	r0, [r4, #12]
 8002448:	9b03      	ldr	r3, [sp, #12]
 800244a:	4298      	cmp	r0, r3
 800244c:	bfb8      	it	lt
 800244e:	4618      	movlt	r0, r3
 8002450:	e7a6      	b.n	80023a0 <_printf_i+0x164>
 8002452:	2301      	movs	r3, #1
 8002454:	4632      	mov	r2, r6
 8002456:	4649      	mov	r1, r9
 8002458:	4640      	mov	r0, r8
 800245a:	47d0      	blx	sl
 800245c:	3001      	adds	r0, #1
 800245e:	d09d      	beq.n	800239c <_printf_i+0x160>
 8002460:	3501      	adds	r5, #1
 8002462:	68e3      	ldr	r3, [r4, #12]
 8002464:	9903      	ldr	r1, [sp, #12]
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	42ab      	cmp	r3, r5
 800246a:	dcf2      	bgt.n	8002452 <_printf_i+0x216>
 800246c:	e7eb      	b.n	8002446 <_printf_i+0x20a>
 800246e:	2500      	movs	r5, #0
 8002470:	f104 0619 	add.w	r6, r4, #25
 8002474:	e7f5      	b.n	8002462 <_printf_i+0x226>
 8002476:	bf00      	nop
 8002478:	080025dd 	.word	0x080025dd
 800247c:	080025ee 	.word	0x080025ee

08002480 <memmove>:
 8002480:	4288      	cmp	r0, r1
 8002482:	b510      	push	{r4, lr}
 8002484:	eb01 0402 	add.w	r4, r1, r2
 8002488:	d902      	bls.n	8002490 <memmove+0x10>
 800248a:	4284      	cmp	r4, r0
 800248c:	4623      	mov	r3, r4
 800248e:	d807      	bhi.n	80024a0 <memmove+0x20>
 8002490:	1e43      	subs	r3, r0, #1
 8002492:	42a1      	cmp	r1, r4
 8002494:	d008      	beq.n	80024a8 <memmove+0x28>
 8002496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800249a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800249e:	e7f8      	b.n	8002492 <memmove+0x12>
 80024a0:	4402      	add	r2, r0
 80024a2:	4601      	mov	r1, r0
 80024a4:	428a      	cmp	r2, r1
 80024a6:	d100      	bne.n	80024aa <memmove+0x2a>
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80024b2:	e7f7      	b.n	80024a4 <memmove+0x24>

080024b4 <_sbrk_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	4d06      	ldr	r5, [pc, #24]	; (80024d0 <_sbrk_r+0x1c>)
 80024b8:	2300      	movs	r3, #0
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	602b      	str	r3, [r5, #0]
 80024c0:	f7fe fcb0 	bl	8000e24 <_sbrk>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_sbrk_r+0x1a>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_sbrk_r+0x1a>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	200001ac 	.word	0x200001ac

080024d4 <memcpy>:
 80024d4:	440a      	add	r2, r1
 80024d6:	4291      	cmp	r1, r2
 80024d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80024dc:	d100      	bne.n	80024e0 <memcpy+0xc>
 80024de:	4770      	bx	lr
 80024e0:	b510      	push	{r4, lr}
 80024e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024ea:	4291      	cmp	r1, r2
 80024ec:	d1f9      	bne.n	80024e2 <memcpy+0xe>
 80024ee:	bd10      	pop	{r4, pc}

080024f0 <_realloc_r>:
 80024f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f4:	4680      	mov	r8, r0
 80024f6:	4614      	mov	r4, r2
 80024f8:	460e      	mov	r6, r1
 80024fa:	b921      	cbnz	r1, 8002506 <_realloc_r+0x16>
 80024fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002500:	4611      	mov	r1, r2
 8002502:	f7ff bc49 	b.w	8001d98 <_malloc_r>
 8002506:	b92a      	cbnz	r2, 8002514 <_realloc_r+0x24>
 8002508:	f7ff fbda 	bl	8001cc0 <_free_r>
 800250c:	4625      	mov	r5, r4
 800250e:	4628      	mov	r0, r5
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002514:	f000 f81b 	bl	800254e <_malloc_usable_size_r>
 8002518:	4284      	cmp	r4, r0
 800251a:	4607      	mov	r7, r0
 800251c:	d802      	bhi.n	8002524 <_realloc_r+0x34>
 800251e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002522:	d812      	bhi.n	800254a <_realloc_r+0x5a>
 8002524:	4621      	mov	r1, r4
 8002526:	4640      	mov	r0, r8
 8002528:	f7ff fc36 	bl	8001d98 <_malloc_r>
 800252c:	4605      	mov	r5, r0
 800252e:	2800      	cmp	r0, #0
 8002530:	d0ed      	beq.n	800250e <_realloc_r+0x1e>
 8002532:	42bc      	cmp	r4, r7
 8002534:	4622      	mov	r2, r4
 8002536:	4631      	mov	r1, r6
 8002538:	bf28      	it	cs
 800253a:	463a      	movcs	r2, r7
 800253c:	f7ff ffca 	bl	80024d4 <memcpy>
 8002540:	4631      	mov	r1, r6
 8002542:	4640      	mov	r0, r8
 8002544:	f7ff fbbc 	bl	8001cc0 <_free_r>
 8002548:	e7e1      	b.n	800250e <_realloc_r+0x1e>
 800254a:	4635      	mov	r5, r6
 800254c:	e7df      	b.n	800250e <_realloc_r+0x1e>

0800254e <_malloc_usable_size_r>:
 800254e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002552:	1f18      	subs	r0, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	bfbc      	itt	lt
 8002558:	580b      	ldrlt	r3, [r1, r0]
 800255a:	18c0      	addlt	r0, r0, r3
 800255c:	4770      	bx	lr
	...

08002560 <_init>:
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002562:	bf00      	nop
 8002564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002566:	bc08      	pop	{r3}
 8002568:	469e      	mov	lr, r3
 800256a:	4770      	bx	lr

0800256c <_fini>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr
